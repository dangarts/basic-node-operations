#EXERCISES

1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

SORT: `sort commands.js` returns a every line of code in the js file which are sorted in alphabetical order.

   OUTPUT:
   ```
               done(data);
               done(userInput);
               if (err) throw err;
            "echo": function(userInput) {
            //the cat command
            //the echo command
            //we will add the functionality of echo next within the object commandLibrary    
            break;
            break;
            case "cat":
            case "echo":
            commandLibrary.cat(userInputArray.slice(1));
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            const fileName = fullPath[0];
            fs.readFile(fileName, (err, data) => {
            });
            },
         process.stdout.write('\nprompt > ');
         process.stdout.write(output);
         }
         "cat": function(fullPath) {
         const command = userInputArray[0];
         const userInputArray = userInput.split(" ");
         switch (command) {
         }
      //parses the user input to understand which command was typed
      const commandLibrary = {
      function done(output) {
      function evaluateCmd(userInput) {
      module.exports.commandLibrary = commandLibrary;
      module.exports.evaluateCmd = evaluateCmd;
      }
      }
      };
      //where we will store our commands
      //where we will store the logic of our commands
      //write out data
      const fs = require("fs");
   ```

WC:`wc commands.js` returns stats for the js file.  This includes the number of newline, number of words, and byte count.

   OUTPUT:
   ```
         45     119    1143 commands.js
   ```

UNIQ: `UNIQ commands.js` returns each line of code removing any repeated lines of code.  This file does not contain any repeating lines of code, so the result is not different then the original.

   OUTPUT: 
   ```
   const fs = require("fs");

   //write out data
   function done(output) {
      process.stdout.write(output);
      process.stdout.write('\nprompt > ');
   }

   //where we will store our commands
   function evaluateCmd(userInput) {
   //parses the user input to understand which command was typed
      const userInputArray = userInput.split(" ");
      const command = userInputArray[0];

      switch (command) {
         case "echo":
         //we will add the functionality of echo next within the object commandLibrary    
         commandLibrary.echo(userInputArray.slice(1).join(" "));
         break;

         case "cat":
         commandLibrary.cat(userInputArray.slice(1));
         break;
      }
   }

   //where we will store the logic of our commands
   const commandLibrary = {
         //the echo command
         "echo": function(userInput) {
            done(userInput);
         },

         //the cat command
      "cat": function(fullPath) {
         const fileName = fullPath[0];
         
         fs.readFile(fileName, (err, data) => {
            if (err) throw err;
            done(data);
         });
      }
   };

   module.exports.commandLibrary = commandLibrary;
   module.exports.evaluateCmd = evaluateCmd;
   ```

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

`uniq commands.js | wc`

This commands computes the lines of code that are non repeating and returns the number of newline, number of words, and byte count of this this output.



# Programming Questions

3. Implement the head command in the commands.js file. The head command outputs the first n lines of a file (you may decide what n is). This function will be similar to cat in structure so it will be helpful to reference.

4. Implement the tail command in the commands.js file. The tail command is the inverse of the head command. It outputs the last n lines of a file (you may decide what n is).

5. It is possible that a user will input a non-existent command to our bash shell. Within commands.js create an errorHandler function which will output an error message if the command cannot be found.
* Hint: Use the default: case in your switch statement.

6. In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the programming challenge.

Reverse String:

let reverseString = (inputString) => {
    let reverseInputStringArray = inputString.split('').reverse().join('');
    console.log(reverseInputStringArray);
}

reverseString("I'm learning to program algorithms!");

